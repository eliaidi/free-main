/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mkfree.apithrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 博客回复传输对象
 */
public class BlogCommentVO implements org.apache.thrift.TBase<BlogCommentVO, BlogCommentVO._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlogCommentVO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUserId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POSTS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postsId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("nick", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPLY_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("replyIp", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TO_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toUserId", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlogCommentVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlogCommentVOTupleSchemeFactory());
  }

  public String id; // required
  public String content; // required
  public String createTime; // required
  public String fromUserId; // required
  public String postsId; // required
  public String nick; // required
  public String replyIp; // required
  public String toUserId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CONTENT((short)2, "content"),
    CREATE_TIME((short)3, "createTime"),
    FROM_USER_ID((short)4, "fromUserId"),
    POSTS_ID((short)5, "postsId"),
    NICK((short)6, "nick"),
    REPLY_IP((short)7, "replyIp"),
    TO_USER_ID((short)8, "toUserId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CONTENT
          return CONTENT;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // FROM_USER_ID
          return FROM_USER_ID;
        case 5: // POSTS_ID
          return POSTS_ID;
        case 6: // NICK
          return NICK;
        case 7: // REPLY_IP
          return REPLY_IP;
        case 8: // TO_USER_ID
          return TO_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("fromUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSTS_ID, new org.apache.thrift.meta_data.FieldMetaData("postsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK, new org.apache.thrift.meta_data.FieldMetaData("nick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_IP, new org.apache.thrift.meta_data.FieldMetaData("replyIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("toUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlogCommentVO.class, metaDataMap);
  }

  public BlogCommentVO() {
  }

  public BlogCommentVO(
    String id,
    String content,
    String createTime,
    String fromUserId,
    String postsId,
    String nick,
    String replyIp,
    String toUserId)
  {
    this();
    this.id = id;
    this.content = content;
    this.createTime = createTime;
    this.fromUserId = fromUserId;
    this.postsId = postsId;
    this.nick = nick;
    this.replyIp = replyIp;
    this.toUserId = toUserId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlogCommentVO(BlogCommentVO other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetFromUserId()) {
      this.fromUserId = other.fromUserId;
    }
    if (other.isSetPostsId()) {
      this.postsId = other.postsId;
    }
    if (other.isSetNick()) {
      this.nick = other.nick;
    }
    if (other.isSetReplyIp()) {
      this.replyIp = other.replyIp;
    }
    if (other.isSetToUserId()) {
      this.toUserId = other.toUserId;
    }
  }

  public BlogCommentVO deepCopy() {
    return new BlogCommentVO(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.content = null;
    this.createTime = null;
    this.fromUserId = null;
    this.postsId = null;
    this.nick = null;
    this.replyIp = null;
    this.toUserId = null;
  }

  public String getId() {
    return this.id;
  }

  public BlogCommentVO setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public BlogCommentVO setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public BlogCommentVO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getFromUserId() {
    return this.fromUserId;
  }

  public BlogCommentVO setFromUserId(String fromUserId) {
    this.fromUserId = fromUserId;
    return this;
  }

  public void unsetFromUserId() {
    this.fromUserId = null;
  }

  /** Returns true if field fromUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUserId() {
    return this.fromUserId != null;
  }

  public void setFromUserIdIsSet(boolean value) {
    if (!value) {
      this.fromUserId = null;
    }
  }

  public String getPostsId() {
    return this.postsId;
  }

  public BlogCommentVO setPostsId(String postsId) {
    this.postsId = postsId;
    return this;
  }

  public void unsetPostsId() {
    this.postsId = null;
  }

  /** Returns true if field postsId is set (has been assigned a value) and false otherwise */
  public boolean isSetPostsId() {
    return this.postsId != null;
  }

  public void setPostsIdIsSet(boolean value) {
    if (!value) {
      this.postsId = null;
    }
  }

  public String getNick() {
    return this.nick;
  }

  public BlogCommentVO setNick(String nick) {
    this.nick = nick;
    return this;
  }

  public void unsetNick() {
    this.nick = null;
  }

  /** Returns true if field nick is set (has been assigned a value) and false otherwise */
  public boolean isSetNick() {
    return this.nick != null;
  }

  public void setNickIsSet(boolean value) {
    if (!value) {
      this.nick = null;
    }
  }

  public String getReplyIp() {
    return this.replyIp;
  }

  public BlogCommentVO setReplyIp(String replyIp) {
    this.replyIp = replyIp;
    return this;
  }

  public void unsetReplyIp() {
    this.replyIp = null;
  }

  /** Returns true if field replyIp is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyIp() {
    return this.replyIp != null;
  }

  public void setReplyIpIsSet(boolean value) {
    if (!value) {
      this.replyIp = null;
    }
  }

  public String getToUserId() {
    return this.toUserId;
  }

  public BlogCommentVO setToUserId(String toUserId) {
    this.toUserId = toUserId;
    return this;
  }

  public void unsetToUserId() {
    this.toUserId = null;
  }

  /** Returns true if field toUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetToUserId() {
    return this.toUserId != null;
  }

  public void setToUserIdIsSet(boolean value) {
    if (!value) {
      this.toUserId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case FROM_USER_ID:
      if (value == null) {
        unsetFromUserId();
      } else {
        setFromUserId((String)value);
      }
      break;

    case POSTS_ID:
      if (value == null) {
        unsetPostsId();
      } else {
        setPostsId((String)value);
      }
      break;

    case NICK:
      if (value == null) {
        unsetNick();
      } else {
        setNick((String)value);
      }
      break;

    case REPLY_IP:
      if (value == null) {
        unsetReplyIp();
      } else {
        setReplyIp((String)value);
      }
      break;

    case TO_USER_ID:
      if (value == null) {
        unsetToUserId();
      } else {
        setToUserId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CONTENT:
      return getContent();

    case CREATE_TIME:
      return getCreateTime();

    case FROM_USER_ID:
      return getFromUserId();

    case POSTS_ID:
      return getPostsId();

    case NICK:
      return getNick();

    case REPLY_IP:
      return getReplyIp();

    case TO_USER_ID:
      return getToUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CONTENT:
      return isSetContent();
    case CREATE_TIME:
      return isSetCreateTime();
    case FROM_USER_ID:
      return isSetFromUserId();
    case POSTS_ID:
      return isSetPostsId();
    case NICK:
      return isSetNick();
    case REPLY_IP:
      return isSetReplyIp();
    case TO_USER_ID:
      return isSetToUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlogCommentVO)
      return this.equals((BlogCommentVO)that);
    return false;
  }

  public boolean equals(BlogCommentVO that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_fromUserId = true && this.isSetFromUserId();
    boolean that_present_fromUserId = true && that.isSetFromUserId();
    if (this_present_fromUserId || that_present_fromUserId) {
      if (!(this_present_fromUserId && that_present_fromUserId))
        return false;
      if (!this.fromUserId.equals(that.fromUserId))
        return false;
    }

    boolean this_present_postsId = true && this.isSetPostsId();
    boolean that_present_postsId = true && that.isSetPostsId();
    if (this_present_postsId || that_present_postsId) {
      if (!(this_present_postsId && that_present_postsId))
        return false;
      if (!this.postsId.equals(that.postsId))
        return false;
    }

    boolean this_present_nick = true && this.isSetNick();
    boolean that_present_nick = true && that.isSetNick();
    if (this_present_nick || that_present_nick) {
      if (!(this_present_nick && that_present_nick))
        return false;
      if (!this.nick.equals(that.nick))
        return false;
    }

    boolean this_present_replyIp = true && this.isSetReplyIp();
    boolean that_present_replyIp = true && that.isSetReplyIp();
    if (this_present_replyIp || that_present_replyIp) {
      if (!(this_present_replyIp && that_present_replyIp))
        return false;
      if (!this.replyIp.equals(that.replyIp))
        return false;
    }

    boolean this_present_toUserId = true && this.isSetToUserId();
    boolean that_present_toUserId = true && that.isSetToUserId();
    if (this_present_toUserId || that_present_toUserId) {
      if (!(this_present_toUserId && that_present_toUserId))
        return false;
      if (!this.toUserId.equals(that.toUserId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BlogCommentVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BlogCommentVO typedOther = (BlogCommentVO)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromUserId()).compareTo(typedOther.isSetFromUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUserId, typedOther.fromUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostsId()).compareTo(typedOther.isSetPostsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postsId, typedOther.postsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNick()).compareTo(typedOther.isSetNick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nick, typedOther.nick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyIp()).compareTo(typedOther.isSetReplyIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyIp, typedOther.replyIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUserId()).compareTo(typedOther.isSetToUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUserId, typedOther.toUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlogCommentVO(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromUserId:");
    if (this.fromUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.fromUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postsId:");
    if (this.postsId == null) {
      sb.append("null");
    } else {
      sb.append(this.postsId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nick:");
    if (this.nick == null) {
      sb.append("null");
    } else {
      sb.append(this.nick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyIp:");
    if (this.replyIp == null) {
      sb.append("null");
    } else {
      sb.append(this.replyIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUserId:");
    if (this.toUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.toUserId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlogCommentVOStandardSchemeFactory implements SchemeFactory {
    public BlogCommentVOStandardScheme getScheme() {
      return new BlogCommentVOStandardScheme();
    }
  }

  private static class BlogCommentVOStandardScheme extends StandardScheme<BlogCommentVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlogCommentVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromUserId = iprot.readString();
              struct.setFromUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSTS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postsId = iprot.readString();
              struct.setPostsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nick = iprot.readString();
              struct.setNickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPLY_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replyIp = iprot.readString();
              struct.setReplyIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TO_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toUserId = iprot.readString();
              struct.setToUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlogCommentVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.fromUserId != null) {
        oprot.writeFieldBegin(FROM_USER_ID_FIELD_DESC);
        oprot.writeString(struct.fromUserId);
        oprot.writeFieldEnd();
      }
      if (struct.postsId != null) {
        oprot.writeFieldBegin(POSTS_ID_FIELD_DESC);
        oprot.writeString(struct.postsId);
        oprot.writeFieldEnd();
      }
      if (struct.nick != null) {
        oprot.writeFieldBegin(NICK_FIELD_DESC);
        oprot.writeString(struct.nick);
        oprot.writeFieldEnd();
      }
      if (struct.replyIp != null) {
        oprot.writeFieldBegin(REPLY_IP_FIELD_DESC);
        oprot.writeString(struct.replyIp);
        oprot.writeFieldEnd();
      }
      if (struct.toUserId != null) {
        oprot.writeFieldBegin(TO_USER_ID_FIELD_DESC);
        oprot.writeString(struct.toUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlogCommentVOTupleSchemeFactory implements SchemeFactory {
    public BlogCommentVOTupleScheme getScheme() {
      return new BlogCommentVOTupleScheme();
    }
  }

  private static class BlogCommentVOTupleScheme extends TupleScheme<BlogCommentVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlogCommentVO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetFromUserId()) {
        optionals.set(3);
      }
      if (struct.isSetPostsId()) {
        optionals.set(4);
      }
      if (struct.isSetNick()) {
        optionals.set(5);
      }
      if (struct.isSetReplyIp()) {
        optionals.set(6);
      }
      if (struct.isSetToUserId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetFromUserId()) {
        oprot.writeString(struct.fromUserId);
      }
      if (struct.isSetPostsId()) {
        oprot.writeString(struct.postsId);
      }
      if (struct.isSetNick()) {
        oprot.writeString(struct.nick);
      }
      if (struct.isSetReplyIp()) {
        oprot.writeString(struct.replyIp);
      }
      if (struct.isSetToUserId()) {
        oprot.writeString(struct.toUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlogCommentVO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromUserId = iprot.readString();
        struct.setFromUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.postsId = iprot.readString();
        struct.setPostsIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nick = iprot.readString();
        struct.setNickIsSet(true);
      }
      if (incoming.get(6)) {
        struct.replyIp = iprot.readString();
        struct.setReplyIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.toUserId = iprot.readString();
        struct.setToUserIdIsSet(true);
      }
    }
  }

}

