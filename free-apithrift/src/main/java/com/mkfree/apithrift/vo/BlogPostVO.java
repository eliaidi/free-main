/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mkfree.apithrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义博客实体，用于接口传输
 */
public class BlogPostVO implements org.apache.thrift.TBase<BlogPostVO, BlogPostVO._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlogPostVO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("views", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REPLIES_FIELD_DESC = new org.apache.thrift.protocol.TField("replies", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField POSTS_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("postsIp", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BLOG_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("blogNick", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BLOG_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("blogCategory", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BlogPostVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BlogPostVOTupleSchemeFactory());
  }

  public String id; // required
  public String title; // required
  public String content; // required
  public String summary; // required
  public int views; // required
  public int replies; // required
  public String postsIp; // required
  public String createTime; // required
  public String updateTime; // required
  public String blogNick; // required
  public String blogCategory; // required
  public String userId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    CONTENT((short)3, "content"),
    SUMMARY((short)4, "summary"),
    VIEWS((short)5, "views"),
    REPLIES((short)6, "replies"),
    POSTS_IP((short)7, "postsIp"),
    CREATE_TIME((short)8, "createTime"),
    UPDATE_TIME((short)9, "updateTime"),
    BLOG_NICK((short)10, "blogNick"),
    BLOG_CATEGORY((short)11, "blogCategory"),
    USER_ID((short)12, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // CONTENT
          return CONTENT;
        case 4: // SUMMARY
          return SUMMARY;
        case 5: // VIEWS
          return VIEWS;
        case 6: // REPLIES
          return REPLIES;
        case 7: // POSTS_IP
          return POSTS_IP;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        case 10: // BLOG_NICK
          return BLOG_NICK;
        case 11: // BLOG_CATEGORY
          return BLOG_CATEGORY;
        case 12: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VIEWS_ISSET_ID = 0;
  private static final int __REPLIES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEWS, new org.apache.thrift.meta_data.FieldMetaData("views", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLIES, new org.apache.thrift.meta_data.FieldMetaData("replies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSTS_IP, new org.apache.thrift.meta_data.FieldMetaData("postsIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOG_NICK, new org.apache.thrift.meta_data.FieldMetaData("blogNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOG_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("blogCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlogPostVO.class, metaDataMap);
  }

  public BlogPostVO() {
  }

  public BlogPostVO(
    String id,
    String title,
    String content,
    String summary,
    int views,
    int replies,
    String postsIp,
    String createTime,
    String updateTime,
    String blogNick,
    String blogCategory,
    String userId)
  {
    this();
    this.id = id;
    this.title = title;
    this.content = content;
    this.summary = summary;
    this.views = views;
    setViewsIsSet(true);
    this.replies = replies;
    setRepliesIsSet(true);
    this.postsIp = postsIp;
    this.createTime = createTime;
    this.updateTime = updateTime;
    this.blogNick = blogNick;
    this.blogCategory = blogCategory;
    this.userId = userId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlogPostVO(BlogPostVO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
    this.views = other.views;
    this.replies = other.replies;
    if (other.isSetPostsIp()) {
      this.postsIp = other.postsIp;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetBlogNick()) {
      this.blogNick = other.blogNick;
    }
    if (other.isSetBlogCategory()) {
      this.blogCategory = other.blogCategory;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
  }

  public BlogPostVO deepCopy() {
    return new BlogPostVO(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    this.content = null;
    this.summary = null;
    setViewsIsSet(false);
    this.views = 0;
    setRepliesIsSet(false);
    this.replies = 0;
    this.postsIp = null;
    this.createTime = null;
    this.updateTime = null;
    this.blogNick = null;
    this.blogCategory = null;
    this.userId = null;
  }

  public String getId() {
    return this.id;
  }

  public BlogPostVO setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public BlogPostVO setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public BlogPostVO setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getSummary() {
    return this.summary;
  }

  public BlogPostVO setSummary(String summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public int getViews() {
    return this.views;
  }

  public BlogPostVO setViews(int views) {
    this.views = views;
    setViewsIsSet(true);
    return this;
  }

  public void unsetViews() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWS_ISSET_ID);
  }

  /** Returns true if field views is set (has been assigned a value) and false otherwise */
  public boolean isSetViews() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWS_ISSET_ID);
  }

  public void setViewsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWS_ISSET_ID, value);
  }

  public int getReplies() {
    return this.replies;
  }

  public BlogPostVO setReplies(int replies) {
    this.replies = replies;
    setRepliesIsSet(true);
    return this;
  }

  public void unsetReplies() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLIES_ISSET_ID);
  }

  /** Returns true if field replies is set (has been assigned a value) and false otherwise */
  public boolean isSetReplies() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLIES_ISSET_ID);
  }

  public void setRepliesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLIES_ISSET_ID, value);
  }

  public String getPostsIp() {
    return this.postsIp;
  }

  public BlogPostVO setPostsIp(String postsIp) {
    this.postsIp = postsIp;
    return this;
  }

  public void unsetPostsIp() {
    this.postsIp = null;
  }

  /** Returns true if field postsIp is set (has been assigned a value) and false otherwise */
  public boolean isSetPostsIp() {
    return this.postsIp != null;
  }

  public void setPostsIpIsSet(boolean value) {
    if (!value) {
      this.postsIp = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public BlogPostVO setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public BlogPostVO setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getBlogNick() {
    return this.blogNick;
  }

  public BlogPostVO setBlogNick(String blogNick) {
    this.blogNick = blogNick;
    return this;
  }

  public void unsetBlogNick() {
    this.blogNick = null;
  }

  /** Returns true if field blogNick is set (has been assigned a value) and false otherwise */
  public boolean isSetBlogNick() {
    return this.blogNick != null;
  }

  public void setBlogNickIsSet(boolean value) {
    if (!value) {
      this.blogNick = null;
    }
  }

  public String getBlogCategory() {
    return this.blogCategory;
  }

  public BlogPostVO setBlogCategory(String blogCategory) {
    this.blogCategory = blogCategory;
    return this;
  }

  public void unsetBlogCategory() {
    this.blogCategory = null;
  }

  /** Returns true if field blogCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetBlogCategory() {
    return this.blogCategory != null;
  }

  public void setBlogCategoryIsSet(boolean value) {
    if (!value) {
      this.blogCategory = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public BlogPostVO setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((String)value);
      }
      break;

    case VIEWS:
      if (value == null) {
        unsetViews();
      } else {
        setViews((Integer)value);
      }
      break;

    case REPLIES:
      if (value == null) {
        unsetReplies();
      } else {
        setReplies((Integer)value);
      }
      break;

    case POSTS_IP:
      if (value == null) {
        unsetPostsIp();
      } else {
        setPostsIp((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case BLOG_NICK:
      if (value == null) {
        unsetBlogNick();
      } else {
        setBlogNick((String)value);
      }
      break;

    case BLOG_CATEGORY:
      if (value == null) {
        unsetBlogCategory();
      } else {
        setBlogCategory((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case SUMMARY:
      return getSummary();

    case VIEWS:
      return Integer.valueOf(getViews());

    case REPLIES:
      return Integer.valueOf(getReplies());

    case POSTS_IP:
      return getPostsIp();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case BLOG_NICK:
      return getBlogNick();

    case BLOG_CATEGORY:
      return getBlogCategory();

    case USER_ID:
      return getUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case SUMMARY:
      return isSetSummary();
    case VIEWS:
      return isSetViews();
    case REPLIES:
      return isSetReplies();
    case POSTS_IP:
      return isSetPostsIp();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case BLOG_NICK:
      return isSetBlogNick();
    case BLOG_CATEGORY:
      return isSetBlogCategory();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlogPostVO)
      return this.equals((BlogPostVO)that);
    return false;
  }

  public boolean equals(BlogPostVO that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_views = true;
    boolean that_present_views = true;
    if (this_present_views || that_present_views) {
      if (!(this_present_views && that_present_views))
        return false;
      if (this.views != that.views)
        return false;
    }

    boolean this_present_replies = true;
    boolean that_present_replies = true;
    if (this_present_replies || that_present_replies) {
      if (!(this_present_replies && that_present_replies))
        return false;
      if (this.replies != that.replies)
        return false;
    }

    boolean this_present_postsIp = true && this.isSetPostsIp();
    boolean that_present_postsIp = true && that.isSetPostsIp();
    if (this_present_postsIp || that_present_postsIp) {
      if (!(this_present_postsIp && that_present_postsIp))
        return false;
      if (!this.postsIp.equals(that.postsIp))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_blogNick = true && this.isSetBlogNick();
    boolean that_present_blogNick = true && that.isSetBlogNick();
    if (this_present_blogNick || that_present_blogNick) {
      if (!(this_present_blogNick && that_present_blogNick))
        return false;
      if (!this.blogNick.equals(that.blogNick))
        return false;
    }

    boolean this_present_blogCategory = true && this.isSetBlogCategory();
    boolean that_present_blogCategory = true && that.isSetBlogCategory();
    if (this_present_blogCategory || that_present_blogCategory) {
      if (!(this_present_blogCategory && that_present_blogCategory))
        return false;
      if (!this.blogCategory.equals(that.blogCategory))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BlogPostVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BlogPostVO typedOther = (BlogPostVO)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(typedOther.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, typedOther.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViews()).compareTo(typedOther.isSetViews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.views, typedOther.views);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplies()).compareTo(typedOther.isSetReplies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replies, typedOther.replies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostsIp()).compareTo(typedOther.isSetPostsIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostsIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postsIp, typedOther.postsIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlogNick()).compareTo(typedOther.isSetBlogNick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlogNick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blogNick, typedOther.blogNick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlogCategory()).compareTo(typedOther.isSetBlogCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlogCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blogCategory, typedOther.blogCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlogPostVO(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("views:");
    sb.append(this.views);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replies:");
    sb.append(this.replies);
    first = false;
    if (!first) sb.append(", ");
    sb.append("postsIp:");
    if (this.postsIp == null) {
      sb.append("null");
    } else {
      sb.append(this.postsIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blogNick:");
    if (this.blogNick == null) {
      sb.append("null");
    } else {
      sb.append(this.blogNick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blogCategory:");
    if (this.blogCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.blogCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlogPostVOStandardSchemeFactory implements SchemeFactory {
    public BlogPostVOStandardScheme getScheme() {
      return new BlogPostVOStandardScheme();
    }
  }

  private static class BlogPostVOStandardScheme extends StandardScheme<BlogPostVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlogPostVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.setSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.views = iprot.readI32();
              struct.setViewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPLIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replies = iprot.readI32();
              struct.setRepliesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POSTS_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.postsIp = iprot.readString();
              struct.setPostsIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BLOG_NICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blogNick = iprot.readString();
              struct.setBlogNickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BLOG_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blogCategory = iprot.readString();
              struct.setBlogCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlogPostVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.summary != null) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        oprot.writeString(struct.summary);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIEWS_FIELD_DESC);
      oprot.writeI32(struct.views);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLIES_FIELD_DESC);
      oprot.writeI32(struct.replies);
      oprot.writeFieldEnd();
      if (struct.postsIp != null) {
        oprot.writeFieldBegin(POSTS_IP_FIELD_DESC);
        oprot.writeString(struct.postsIp);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.blogNick != null) {
        oprot.writeFieldBegin(BLOG_NICK_FIELD_DESC);
        oprot.writeString(struct.blogNick);
        oprot.writeFieldEnd();
      }
      if (struct.blogCategory != null) {
        oprot.writeFieldBegin(BLOG_CATEGORY_FIELD_DESC);
        oprot.writeString(struct.blogCategory);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlogPostVOTupleSchemeFactory implements SchemeFactory {
    public BlogPostVOTupleScheme getScheme() {
      return new BlogPostVOTupleScheme();
    }
  }

  private static class BlogPostVOTupleScheme extends TupleScheme<BlogPostVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlogPostVO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetSummary()) {
        optionals.set(3);
      }
      if (struct.isSetViews()) {
        optionals.set(4);
      }
      if (struct.isSetReplies()) {
        optionals.set(5);
      }
      if (struct.isSetPostsIp()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(8);
      }
      if (struct.isSetBlogNick()) {
        optionals.set(9);
      }
      if (struct.isSetBlogCategory()) {
        optionals.set(10);
      }
      if (struct.isSetUserId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetSummary()) {
        oprot.writeString(struct.summary);
      }
      if (struct.isSetViews()) {
        oprot.writeI32(struct.views);
      }
      if (struct.isSetReplies()) {
        oprot.writeI32(struct.replies);
      }
      if (struct.isSetPostsIp()) {
        oprot.writeString(struct.postsIp);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetBlogNick()) {
        oprot.writeString(struct.blogNick);
      }
      if (struct.isSetBlogCategory()) {
        oprot.writeString(struct.blogCategory);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlogPostVO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.summary = iprot.readString();
        struct.setSummaryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.views = iprot.readI32();
        struct.setViewsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.replies = iprot.readI32();
        struct.setRepliesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.postsIp = iprot.readString();
        struct.setPostsIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.blogNick = iprot.readString();
        struct.setBlogNickIsSet(true);
      }
      if (incoming.get(10)) {
        struct.blogCategory = iprot.readString();
        struct.setBlogCategoryIsSet(true);
      }
      if (incoming.get(11)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

