/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mkfree.apithrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 用于分页传输对象
 */
public class PaginationVO implements org.apache.thrift.TBase<PaginationVO, PaginationVO._Fields>, java.io.Serializable, Cloneable, Comparable<PaginationVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaginationVO");

  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UP_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("upPage", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NEXT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextPage", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPage", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pageUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("datas", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PaginationVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PaginationVOTupleSchemeFactory());
  }

  public int pageSize; // required
  public int pageNo; // required
  public int upPage; // required
  public int nextPage; // required
  public long totalCount; // required
  public long totalPage; // required
  public String pageUrl; // required
  public String params; // required
  public List<BlogPostVO> datas; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_SIZE((short)1, "pageSize"),
    PAGE_NO((short)2, "pageNo"),
    UP_PAGE((short)3, "upPage"),
    NEXT_PAGE((short)4, "nextPage"),
    TOTAL_COUNT((short)5, "totalCount"),
    TOTAL_PAGE((short)6, "totalPage"),
    PAGE_URL((short)7, "pageUrl"),
    PARAMS((short)8, "params"),
    DATAS((short)9, "datas");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_SIZE
          return PAGE_SIZE;
        case 2: // PAGE_NO
          return PAGE_NO;
        case 3: // UP_PAGE
          return UP_PAGE;
        case 4: // NEXT_PAGE
          return NEXT_PAGE;
        case 5: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 6: // TOTAL_PAGE
          return TOTAL_PAGE;
        case 7: // PAGE_URL
          return PAGE_URL;
        case 8: // PARAMS
          return PARAMS;
        case 9: // DATAS
          return DATAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGESIZE_ISSET_ID = 0;
  private static final int __PAGENO_ISSET_ID = 1;
  private static final int __UPPAGE_ISSET_ID = 2;
  private static final int __NEXTPAGE_ISSET_ID = 3;
  private static final int __TOTALCOUNT_ISSET_ID = 4;
  private static final int __TOTALPAGE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UP_PAGE, new org.apache.thrift.meta_data.FieldMetaData("upPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEXT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("nextPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_PAGE, new org.apache.thrift.meta_data.FieldMetaData("totalPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("pageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAS, new org.apache.thrift.meta_data.FieldMetaData("datas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlogPostVO.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaginationVO.class, metaDataMap);
  }

  public PaginationVO() {
    this.pageSize = 20;

    this.params = "";

  }

  public PaginationVO(
    int pageSize,
    int pageNo,
    int upPage,
    int nextPage,
    long totalCount,
    long totalPage,
    String pageUrl,
    String params,
    List<BlogPostVO> datas)
  {
    this();
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    this.upPage = upPage;
    setUpPageIsSet(true);
    this.nextPage = nextPage;
    setNextPageIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.totalPage = totalPage;
    setTotalPageIsSet(true);
    this.pageUrl = pageUrl;
    this.params = params;
    this.datas = datas;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaginationVO(PaginationVO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pageSize = other.pageSize;
    this.pageNo = other.pageNo;
    this.upPage = other.upPage;
    this.nextPage = other.nextPage;
    this.totalCount = other.totalCount;
    this.totalPage = other.totalPage;
    if (other.isSetPageUrl()) {
      this.pageUrl = other.pageUrl;
    }
    if (other.isSetParams()) {
      this.params = other.params;
    }
    if (other.isSetDatas()) {
      List<BlogPostVO> __this__datas = new ArrayList<BlogPostVO>(other.datas.size());
      for (BlogPostVO other_element : other.datas) {
        __this__datas.add(new BlogPostVO(other_element));
      }
      this.datas = __this__datas;
    }
  }

  public PaginationVO deepCopy() {
    return new PaginationVO(this);
  }

  @Override
  public void clear() {
    this.pageSize = 20;

    setPageNoIsSet(false);
    this.pageNo = 0;
    setUpPageIsSet(false);
    this.upPage = 0;
    setNextPageIsSet(false);
    this.nextPage = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setTotalPageIsSet(false);
    this.totalPage = 0;
    this.pageUrl = null;
    this.params = "";

    this.datas = null;
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public PaginationVO setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPageNo() {
    return this.pageNo;
  }

  public PaginationVO setPageNo(int pageNo) {
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    return this;
  }

  public void unsetPageNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNo() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  public void setPageNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
  }

  public int getUpPage() {
    return this.upPage;
  }

  public PaginationVO setUpPage(int upPage) {
    this.upPage = upPage;
    setUpPageIsSet(true);
    return this;
  }

  public void unsetUpPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPAGE_ISSET_ID);
  }

  /** Returns true if field upPage is set (has been assigned a value) and false otherwise */
  public boolean isSetUpPage() {
    return EncodingUtils.testBit(__isset_bitfield, __UPPAGE_ISSET_ID);
  }

  public void setUpPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPAGE_ISSET_ID, value);
  }

  public int getNextPage() {
    return this.nextPage;
  }

  public PaginationVO setNextPage(int nextPage) {
    this.nextPage = nextPage;
    setNextPageIsSet(true);
    return this;
  }

  public void unsetNextPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTPAGE_ISSET_ID);
  }

  /** Returns true if field nextPage is set (has been assigned a value) and false otherwise */
  public boolean isSetNextPage() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTPAGE_ISSET_ID);
  }

  public void setNextPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTPAGE_ISSET_ID, value);
  }

  public long getTotalCount() {
    return this.totalCount;
  }

  public PaginationVO setTotalCount(long totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public long getTotalPage() {
    return this.totalPage;
  }

  public PaginationVO setTotalPage(long totalPage) {
    this.totalPage = totalPage;
    setTotalPageIsSet(true);
    return this;
  }

  public void unsetTotalPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  /** Returns true if field totalPage is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPage() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  public void setTotalPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPAGE_ISSET_ID, value);
  }

  public String getPageUrl() {
    return this.pageUrl;
  }

  public PaginationVO setPageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
    return this;
  }

  public void unsetPageUrl() {
    this.pageUrl = null;
  }

  /** Returns true if field pageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPageUrl() {
    return this.pageUrl != null;
  }

  public void setPageUrlIsSet(boolean value) {
    if (!value) {
      this.pageUrl = null;
    }
  }

  public String getParams() {
    return this.params;
  }

  public PaginationVO setParams(String params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public int getDatasSize() {
    return (this.datas == null) ? 0 : this.datas.size();
  }

  public java.util.Iterator<BlogPostVO> getDatasIterator() {
    return (this.datas == null) ? null : this.datas.iterator();
  }

  public void addToDatas(BlogPostVO elem) {
    if (this.datas == null) {
      this.datas = new ArrayList<BlogPostVO>();
    }
    this.datas.add(elem);
  }

  public List<BlogPostVO> getDatas() {
    return this.datas;
  }

  public PaginationVO setDatas(List<BlogPostVO> datas) {
    this.datas = datas;
    return this;
  }

  public void unsetDatas() {
    this.datas = null;
  }

  /** Returns true if field datas is set (has been assigned a value) and false otherwise */
  public boolean isSetDatas() {
    return this.datas != null;
  }

  public void setDatasIsSet(boolean value) {
    if (!value) {
      this.datas = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PAGE_NO:
      if (value == null) {
        unsetPageNo();
      } else {
        setPageNo((Integer)value);
      }
      break;

    case UP_PAGE:
      if (value == null) {
        unsetUpPage();
      } else {
        setUpPage((Integer)value);
      }
      break;

    case NEXT_PAGE:
      if (value == null) {
        unsetNextPage();
      } else {
        setNextPage((Integer)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Long)value);
      }
      break;

    case TOTAL_PAGE:
      if (value == null) {
        unsetTotalPage();
      } else {
        setTotalPage((Long)value);
      }
      break;

    case PAGE_URL:
      if (value == null) {
        unsetPageUrl();
      } else {
        setPageUrl((String)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((String)value);
      }
      break;

    case DATAS:
      if (value == null) {
        unsetDatas();
      } else {
        setDatas((List<BlogPostVO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case PAGE_NO:
      return Integer.valueOf(getPageNo());

    case UP_PAGE:
      return Integer.valueOf(getUpPage());

    case NEXT_PAGE:
      return Integer.valueOf(getNextPage());

    case TOTAL_COUNT:
      return Long.valueOf(getTotalCount());

    case TOTAL_PAGE:
      return Long.valueOf(getTotalPage());

    case PAGE_URL:
      return getPageUrl();

    case PARAMS:
      return getParams();

    case DATAS:
      return getDatas();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_SIZE:
      return isSetPageSize();
    case PAGE_NO:
      return isSetPageNo();
    case UP_PAGE:
      return isSetUpPage();
    case NEXT_PAGE:
      return isSetNextPage();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case TOTAL_PAGE:
      return isSetTotalPage();
    case PAGE_URL:
      return isSetPageUrl();
    case PARAMS:
      return isSetParams();
    case DATAS:
      return isSetDatas();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaginationVO)
      return this.equals((PaginationVO)that);
    return false;
  }

  public boolean equals(PaginationVO that) {
    if (that == null)
      return false;

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_pageNo = true;
    boolean that_present_pageNo = true;
    if (this_present_pageNo || that_present_pageNo) {
      if (!(this_present_pageNo && that_present_pageNo))
        return false;
      if (this.pageNo != that.pageNo)
        return false;
    }

    boolean this_present_upPage = true;
    boolean that_present_upPage = true;
    if (this_present_upPage || that_present_upPage) {
      if (!(this_present_upPage && that_present_upPage))
        return false;
      if (this.upPage != that.upPage)
        return false;
    }

    boolean this_present_nextPage = true;
    boolean that_present_nextPage = true;
    if (this_present_nextPage || that_present_nextPage) {
      if (!(this_present_nextPage && that_present_nextPage))
        return false;
      if (this.nextPage != that.nextPage)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_totalPage = true;
    boolean that_present_totalPage = true;
    if (this_present_totalPage || that_present_totalPage) {
      if (!(this_present_totalPage && that_present_totalPage))
        return false;
      if (this.totalPage != that.totalPage)
        return false;
    }

    boolean this_present_pageUrl = true && this.isSetPageUrl();
    boolean that_present_pageUrl = true && that.isSetPageUrl();
    if (this_present_pageUrl || that_present_pageUrl) {
      if (!(this_present_pageUrl && that_present_pageUrl))
        return false;
      if (!this.pageUrl.equals(that.pageUrl))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_datas = true && this.isSetDatas();
    boolean that_present_datas = true && that.isSetDatas();
    if (this_present_datas || that_present_datas) {
      if (!(this_present_datas && that_present_datas))
        return false;
      if (!this.datas.equals(that.datas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PaginationVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpPage()).compareTo(other.isSetUpPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upPage, other.upPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextPage()).compareTo(other.isSetNextPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextPage, other.nextPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPage()).compareTo(other.isSetTotalPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPage, other.totalPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageUrl()).compareTo(other.isSetPageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageUrl, other.pageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatas()).compareTo(other.isSetDatas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datas, other.datas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PaginationVO(");
    boolean first = true;

    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNo:");
    sb.append(this.pageNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upPage:");
    sb.append(this.upPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextPage:");
    sb.append(this.nextPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPage:");
    sb.append(this.totalPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageUrl:");
    if (this.pageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.pageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datas:");
    if (this.datas == null) {
      sb.append("null");
    } else {
      sb.append(this.datas);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaginationVOStandardSchemeFactory implements SchemeFactory {
    public PaginationVOStandardScheme getScheme() {
      return new PaginationVOStandardScheme();
    }
  }

  private static class PaginationVOStandardScheme extends StandardScheme<PaginationVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaginationVO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNo = iprot.readI32();
              struct.setPageNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UP_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upPage = iprot.readI32();
              struct.setUpPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEXT_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextPage = iprot.readI32();
              struct.setNextPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalCount = iprot.readI64();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalPage = iprot.readI64();
              struct.setTotalPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageUrl = iprot.readString();
              struct.setPageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.params = iprot.readString();
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.datas = new ArrayList<BlogPostVO>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  BlogPostVO _elem10;
                  _elem10 = new BlogPostVO();
                  _elem10.read(iprot);
                  struct.datas.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setDatasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaginationVO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
      oprot.writeI32(struct.pageNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UP_PAGE_FIELD_DESC);
      oprot.writeI32(struct.upPage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_PAGE_FIELD_DESC);
      oprot.writeI32(struct.nextPage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PAGE_FIELD_DESC);
      oprot.writeI64(struct.totalPage);
      oprot.writeFieldEnd();
      if (struct.pageUrl != null) {
        oprot.writeFieldBegin(PAGE_URL_FIELD_DESC);
        oprot.writeString(struct.pageUrl);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        oprot.writeString(struct.params);
        oprot.writeFieldEnd();
      }
      if (struct.datas != null) {
        oprot.writeFieldBegin(DATAS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.datas.size()));
          for (BlogPostVO _iter11 : struct.datas)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaginationVOTupleSchemeFactory implements SchemeFactory {
    public PaginationVOTupleScheme getScheme() {
      return new PaginationVOTupleScheme();
    }
  }

  private static class PaginationVOTupleScheme extends TupleScheme<PaginationVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaginationVO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageSize()) {
        optionals.set(0);
      }
      if (struct.isSetPageNo()) {
        optionals.set(1);
      }
      if (struct.isSetUpPage()) {
        optionals.set(2);
      }
      if (struct.isSetNextPage()) {
        optionals.set(3);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(4);
      }
      if (struct.isSetTotalPage()) {
        optionals.set(5);
      }
      if (struct.isSetPageUrl()) {
        optionals.set(6);
      }
      if (struct.isSetParams()) {
        optionals.set(7);
      }
      if (struct.isSetDatas()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetPageNo()) {
        oprot.writeI32(struct.pageNo);
      }
      if (struct.isSetUpPage()) {
        oprot.writeI32(struct.upPage);
      }
      if (struct.isSetNextPage()) {
        oprot.writeI32(struct.nextPage);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI64(struct.totalCount);
      }
      if (struct.isSetTotalPage()) {
        oprot.writeI64(struct.totalPage);
      }
      if (struct.isSetPageUrl()) {
        oprot.writeString(struct.pageUrl);
      }
      if (struct.isSetParams()) {
        oprot.writeString(struct.params);
      }
      if (struct.isSetDatas()) {
        {
          oprot.writeI32(struct.datas.size());
          for (BlogPostVO _iter12 : struct.datas)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaginationVO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageNo = iprot.readI32();
        struct.setPageNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.upPage = iprot.readI32();
        struct.setUpPageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nextPage = iprot.readI32();
        struct.setNextPageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalCount = iprot.readI64();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalPage = iprot.readI64();
        struct.setTotalPageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pageUrl = iprot.readString();
        struct.setPageUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.params = iprot.readString();
        struct.setParamsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.datas = new ArrayList<BlogPostVO>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            BlogPostVO _elem15;
            _elem15 = new BlogPostVO();
            _elem15.read(iprot);
            struct.datas.add(_elem15);
          }
        }
        struct.setDatasIsSet(true);
      }
    }
  }

}

